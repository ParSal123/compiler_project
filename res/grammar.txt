Program -> DecList eof .

DecList -> #push TypeSpec #push id Fid_4 DecList 
            | .

Fid_4 -> #decl_var ;
        | [ #push num ] ; #decl_arr
        | #decl_func ( Params ) CompoundStmt #end_skip_directives .

TypeSpec -> int 
           | void .

Params -> #push int #push id Fid_2 ParamList 
         | #push void Fvoid .

Fvoid -> #push id Fid_2 ParamList 
        | #pop .

ParamList -> , #push TypeSpec #push id Fid_2 ParamList 
              | .

Fid_2 -> #add_param
        | #add_param [ ] .

CompoundStmt -> { DecList StmtList } #end_scope .

StmtList -> Stmt StmtList 
             | .

Stmt -> #decl_normal_scope CompoundStmt 
       | if ( Expr ) #save #decl_if_scope Stmt #end_scope_while #jpf_if #save else #decl_else_scope Stmt #end_scope_while #jp_if
       | while #label ( Expr ) #decl_while_scope Stmt #while_ #end_scope_while
       | return #return_type_check Freturn #return_assignment
       | switch ( Expr ) { #decl_switch_scope CaseStmts DefaultStmt } #end_scope
       | continue #continue_ ;
       | break #break_ ;
       | Freturn .

Freturn -> ; 
          | Expr ; #pop .

CaseStmts -> CaseStmt #jmp_case CaseStmts 
              | #two_dummies .

CaseStmt -> case #push num #eq_case #save : StmtList .

DefaultStmt -> default : StmtList 
              | .

Expr -> #push id Fid_5 
       | ( Expr ) Term_1 AddExpr_1 FAddExpr 
       | #push num Term_1 AddExpr_1 FAddExpr 
       | + Factor Term_1 AddExpr_1 FAddExpr 
       | - Factor #negate Term_1 AddExpr_1 FAddExpr .

Fid_5 -> Fid F]
        | #push ( Args ) #func_call Term_1 AddExpr_1 FAddExpr .

F] -> = Expr #assign
     | Term_1 AddExpr_1 FAddExpr .

Fid -> 
      | [ Expr ] #resolve_array_index .

FAddExpr -> #push Relop Term AddExpr_1 #relop
           | .

Relop -> < 
        | == .

AddExpr_1 -> + Term #add AddExpr_1 
            | - Term #sub AddExpr_1
            | .

Term -> SignedFactor Term_1 .

Term_1 -> * SignedFactor #mult Term_1 
         | .

SignedFactor -> Factor 
               | + Factor 
               | - Factor #negate .

Factor -> ( Expr ) 
         | #push id Fid_3 
         | #push num .

Fid_3 -> Fid 
        | #func_call ( Args ) .

Args -> Expr #assign_func ArgList_1 
       | .

ArgList_1 -> , Expr #assign_func ArgList_1 
            | .
